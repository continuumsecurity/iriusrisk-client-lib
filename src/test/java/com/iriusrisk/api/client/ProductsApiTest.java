/*
 * IriusRisk API
 * IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.client.model.Body17;
import com.iriusrisk.api.client.model.Body18;
import com.iriusrisk.api.client.model.Body19;
import com.iriusrisk.api.client.model.Body20;
import com.iriusrisk.api.client.model.Body21;
import com.iriusrisk.api.client.model.Body22;
import com.iriusrisk.api.client.model.ComponentControl;
import com.iriusrisk.api.client.model.ComponentUseCaseThreatShort;
import com.iriusrisk.api.client.model.ComponentWeakness;
import com.iriusrisk.api.client.model.ControlsId;
import com.iriusrisk.api.client.model.CreateProduct;

import java.io.File;
import com.iriusrisk.api.client.model.InlineResponse200;
import com.iriusrisk.api.client.model.InlineResponse2001;
import com.iriusrisk.api.client.model.InlineResponse2011;
import com.iriusrisk.api.client.model.Product;
import com.iriusrisk.api.client.model.ProductShort;
import com.iriusrisk.api.client.model.ProductShortGroups;
import com.iriusrisk.api.client.model.ProductShortUsers;
import com.iriusrisk.api.client.model.RiskSummary;
import com.iriusrisk.api.client.model.UpdateProduct;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * Gets a list of all products.
     *
     * Gets a list of all products visible by the user who perform the call. Conditions to be able to perform the action:   - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsGetTest() {
        Integer max = null;
        Integer index = null;
        String workflowState = null;
        List<ProductShort> response = api.productsGet(max, index, workflowState);

        // TODO: test validations
    }
    
    /**
     * Creates a new product
     *
     * Createa a new product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_CREATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsPostTest() {
        CreateProduct body = null;
        ProductShort response = api.productsPost(body);

        // TODO: test validations
    }
    
    /**
     * Sets the desired status to a countermeasure
     *
     * Sets the desired status to a countermeasure. Possible values are:             - implemented             - recommended             - rejected             - required Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.   - To have the permission **COUNTERMEASURE_SELECT_IMPLEMENTED** granted to set implemented state.   - To have the permission **COUNTERMEASURE_SELECT_RECOMMENDED** granted to set recommended state.   - To have the permission **COUNTERMEASURE_SELECT_REJECTED** granted to set reject state.   - To have the permission **COUNTERMEASURE_SELECT_REQUIRED** granted to set required state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdComponentsComponentIdControlsCountermeasureIdStatusPutTest() {
        String productId = null;
        String componentId = null;
        String countermeasureId = null;
        Body21 body = null;
        api.productsProductIdComponentsComponentIdControlsCountermeasureIdStatusPut(productId, componentId, countermeasureId, body);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all required countermeasures of a component
     *
     * Returns a list of all the required countermeasures of a component. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdComponentsComponentIdControlsRequiredGetTest() {
        String productId = null;
        String componentId = null;
        List<ComponentControl> response = api.productsProductIdComponentsComponentIdControlsRequiredGet(productId, componentId);

        // TODO: test validations
    }
    
    /**
     * Updates a single test to a component.
     *
     * Updates a single test to a component. Conditions to be able to perform the action:   - To have the permission **TEST_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdComponentsComponentIdTestsCwePutTest() {
        String productId = null;
        String componentId = null;
        String cwe = null;
        Body22 body = null;
        List<InlineResponse2001> response = api.productsProductIdComponentsComponentIdTestsCwePut(productId, componentId, cwe, body);

        // TODO: test validations
    }
    
    /**
     * Imports test results from different sources to a component
     *
     * Imports test results from different sources (OWASP ZAP, Cucumber, Micro Focus Fortify) into the specified component. More than one file can be attached to the call. Conditions to be able to perform the action:   - To have the permission **TEST_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdComponentsComponentIdTestsTypeUploadPostTest() {
        String productId = null;
        String componentId = null;
        String type = null;
        File fileName = null;
        InlineResponse2011 response = api.productsProductIdComponentsComponentIdTestsTypeUploadPost(productId, componentId, type, fileName);

        // TODO: test validations
    }
    
    /**
     * Deletes the given list of product countermeasures
     *
     * Deletes the given list of the countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsDeleteTest() {
        String productId = null;
        ControlsId controlsId = null;
        api.productsProductIdControlsDelete(productId, controlsId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all product countermeasures
     *
     * Returns a list of all the countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsGetTest() {
        String productId = null;
        List<ComponentControl> response = api.productsProductIdControlsGet(productId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all implemented countermeasures of a product.
     *
     * Returns a list of all the implemented countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsImplementedGetTest() {
        String productId = null;
        List<ComponentControl> response = api.productsProductIdControlsImplementedGet(productId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all required countermeasures of a product
     *
     * Returns a list of all the required countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsRequiredGetTest() {
        String productId = null;
        List<ComponentControl> response = api.productsProductIdControlsRequiredGet(productId);

        // TODO: test validations
    }
    
    /**
     * Deletes a product
     *
     * Deletes a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_DELETE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdDeleteTest() {
        String productId = null;
        api.productsProductIdDelete(productId);

        // TODO: test validations
    }
    
    /**
     * Gets diagram image for product.
     *
     * Gets a an image in png format of the product diagram. Conditions to be able to perform the action:   - No special permissions are required to perform this action.   - This API call can be used only if the user who performs the call has visibility over the product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdDiagramImageGetTest() {
        String productId = null;
        String response = api.productsProductIdDiagramImageGet(productId);

        // TODO: test validations
    }
    
    /**
     * Gets product details
     *
     * Gets the details of a product. Conditions to be able to perform the action:   - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdGetTest() {
        String productId = null;
        Product response = api.productsProductIdGet(productId);

        // TODO: test validations
    }
    
    /**
     * Unassigns a list of user groups from a product.
     *
     * Unassigns a list of user groups from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdGroupsDeleteTest() {
        String productId = null;
        Body18 body = null;
        InlineResponse200 response = api.productsProductIdGroupsDelete(productId, body);

        // TODO: test validations
    }
    
    /**
     * List all groups assigned to a product
     *
     * List all groups assigned to a product.     Conditions to be able to perform the action:         - If the caller has the PRODUCTS_LIST_ALL permission then all products can be queried without restriction.         - Without the PRODUCTS_LIST_ALL permission, the call will only return the groups if the caller belongs to that product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdGroupsGetTest() {
        String productId = null;
        List<String> response = api.productsProductIdGroupsGet(productId);

        // TODO: test validations
    }
    
    /**
     * Assigns groups of users to a product.
     *
     * Assigns groups of users to a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdGroupsPutTest() {
        String productId = null;
        Body17 body = null;
        ProductShortGroups response = api.productsProductIdGroupsPut(productId, body);

        // TODO: test validations
    }
    
    /**
     * Updates a product
     *
     * Updates the details of a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdPutTest() {
        String productId = null;
        UpdateProduct updateProductRequestBody = null;
        api.productsProductIdPut(productId, updateProductRequestBody);

        // TODO: test validations
    }
    
    /**
     * Gets the risks summary of a product
     *
     * This endpoint returns a summary of the risks of a product. Conditions to be able to perform the action:   - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdRisksGetTest() {
        String productId = null;
        RiskSummary response = api.productsProductIdRisksGet(productId);

        // TODO: test validations
    }
    
    /**
     * Imports test results from different sources to a product.
     *
     * Imports test results from different sources (OWASP ZAP, Cucumber, Micro Focus Fortify) uploading files. More than one file can be attached to the call. Conditions to be able to perform the action:   - To have the permission **TEST_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdTestsTypeUploadPostTest() {
        String productId = null;
        String type = null;
        File fileName = null;
        InlineResponse2011 response = api.productsProductIdTestsTypeUploadPost(productId, type, fileName);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all threats of a product
     *
     * Returns a list of all the threats of a product. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdThreatsGetTest() {
        String productId = null;
        List<ComponentUseCaseThreatShort> response = api.productsProductIdThreatsGet(productId);

        // TODO: test validations
    }
    
    /**
     * Unassigns a list of users from a product.
     *
     * Unassign a list of users from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersDeleteTest() {
        String productId = null;
        Body20 body = null;
        api.productsProductIdUsersDelete(productId, body);

        // TODO: test validations
    }
    
    /**
     * List all users assigned to a product
     *
     * List all users assigned to a product.     Conditions to be able to perform the action:         - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersGetTest() {
        String productId = null;
        List<String> response = api.productsProductIdUsersGet(productId);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a product.
     *
     * Assigns users to a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersPutTest() {
        String productId = null;
        Body19 body = null;
        ProductShortUsers response = api.productsProductIdUsersPut(productId, body);

        // TODO: test validations
    }
    
    /**
     * Unassigns a user from a product
     *
     * Unassigns a user from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersUserIdDeleteTest() {
        String productId = null;
        String userId = null;
        api.productsProductIdUsersUserIdDelete(productId, userId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all weaknesses of a product
     *
     * Returns a list of all the weaknesses of a product. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdWeaknessesGetTest() {
        String productId = null;
        List<ComponentWeakness> response = api.productsProductIdWeaknessesGet(productId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all weaknesses of a product filtered by test state
     *
     * Returns a list of all the weaknesses of a product. With the optional parameter &#x60;test_state&#x60; can filter the weakness by test state. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdWeaknessesTestStateGetTest() {
        String productId = null;
        String testState = null;
        List<ComponentWeakness> response = api.productsProductIdWeaknessesTestStateGet(productId, testState);

        // TODO: test validations
    }
    
    /**
     * Creates a new product, library or template from a XML file upload.
     *
     * Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsUploadPostTest() {
        String ref = null;
        String name = null;
        File fileName = null;
        String type = null;
        ProductShort response = api.productsUploadPost(ref, name, fileName, type);

        // TODO: test validations
    }
    
    /**
     * Updates an existing product from a XML file upload.
     *
     * Updates a product from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_UPDATE** granted allows to update a product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsUploadProductIdPostTest() {
        String productId = null;
        File fileName = null;
        String deleteCountermeasures = null;
        ProductShort response = api.productsUploadProductIdPost(productId, fileName, deleteCountermeasures);

        // TODO: test validations
    }
    
    /**
     * Executes rules by a product
     *
     * Execute the rules engine for a product and for all components within the product.  If the deleteCountermeasures parameter is true, then threats and countermeasure that no longer apply to the model will automatically be removed.  If it is false, then those threats and countermeasures will remain in the model.   - To have the permission **ARCHITECTURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesProductProductIdPutTest() {
        String productId = null;
        String deleteCountermeasures = null;
        api.rulesProductProductIdPut(productId, deleteCountermeasures);

        // TODO: test validations
    }
    
}
