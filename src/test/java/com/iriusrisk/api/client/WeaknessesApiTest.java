/*
 * IriusRisk API
 * IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.client.model.Body13;
import com.iriusrisk.api.client.model.Body14;
import com.iriusrisk.api.client.model.Body15;
import com.iriusrisk.api.client.model.ComponentWeakness;
import com.iriusrisk.api.client.model.LibraryControl;
import com.iriusrisk.api.client.model.LibraryWeakness;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for WeaknessesApi
 */
@Ignore
public class WeaknessesApiTest {

    private final WeaknessesApi api = new WeaknessesApi();

    
    /**
     * Associates weakness to a threat in a risk pattern.
     *
     * Associates weakness to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesPutTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        String threatId = null;
        Body14 body = null;
        LibraryWeakness response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesPut(libraryId, riskPatternId, useCaseId, threatId, body);

        // TODO: test validations
    }
    
    /**
     * Associates a countermeasure to a weakness in a risk pattern.
     *
     * Associates a countermeasure to a weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesWeaknessIdCountermeasuresPutTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        String threatId = null;
        String weaknessId = null;
        Body15 body = null;
        LibraryControl response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesWeaknessIdCountermeasuresPut(libraryId, riskPatternId, useCaseId, threatId, weaknessId, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new weakness in a risk pattern
     *
     * Creates a new Weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdWeaknessesPostTest() {
        String libraryId = null;
        String riskPatternId = null;
        Body13 body = null;
        LibraryWeakness response = api.librariesLibraryIdRiskpatternsRiskPatternIdWeaknessesPost(libraryId, riskPatternId, body);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all weaknesses of a product
     *
     * Returns a list of all the weaknesses of a product. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdWeaknessesGetTest() {
        String productId = null;
        List<ComponentWeakness> response = api.productsProductIdWeaknessesGet(productId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all weaknesses of a product filtered by test state
     *
     * Returns a list of all the weaknesses of a product. With the optional parameter &#x60;test_state&#x60; can filter the weakness by test state. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdWeaknessesTestStateGetTest() {
        String productId = null;
        String testState = null;
        List<ComponentWeakness> response = api.productsProductIdWeaknessesTestStateGet(productId, testState);

        // TODO: test validations
    }
    
}
