/*
 * IriusRisk API
 * IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.client.model.Body19;
import com.iriusrisk.api.client.model.Body20;
import com.iriusrisk.api.client.model.Body23;
import com.iriusrisk.api.client.model.Body3;
import com.iriusrisk.api.client.model.Body4;
import com.iriusrisk.api.client.model.Body7;
import com.iriusrisk.api.client.model.Body8;
import com.iriusrisk.api.client.model.InlineResponse201;
import com.iriusrisk.api.client.model.ProductShortUsers;
import com.iriusrisk.api.client.model.User;
import com.iriusrisk.api.client.model.UserDetailed;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Unassign a list of users from a business unit
     *
     * Unassign a list of users from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdUsersDeleteTest() {
        String businessunitId = null;
        Body8 body = null;
        api.businessunitsBusinessunitIdUsersDelete(businessunitId, body);

        // TODO: test validations
    }
    
    /**
     * List users from a business unit
     *
     * List users who belongs to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdUsersGetTest() {
        String businessunitId = null;
        List<User> response = api.businessunitsBusinessunitIdUsersGet(businessunitId);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a business unit
     *
     * Assigns users to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdUsersPutTest() {
        String businessunitId = null;
        Body7 body = null;
        InlineResponse201 response = api.businessunitsBusinessunitIdUsersPut(businessunitId, body);

        // TODO: test validations
    }
    
    /**
     * Removes a user from a business unit
     *
     * Unassign a user from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitsIdUsersUserIdDeleteTest() {
        String businessunitsId = null;
        String userId = null;
        api.businessunitsBusinessunitsIdUsersUserIdDelete(businessunitsId, userId);

        // TODO: test validations
    }
    
    /**
     * Unassign a list of users from a group
     *
     * Unassign a list of users from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersDeleteTest() {
        String groupId = null;
        Body4 body = null;
        api.groupsGroupIdUsersDelete(groupId, body);

        // TODO: test validations
    }
    
    /**
     * List users from a group
     *
     * List users who belongs to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersGetTest() {
        String groupId = null;
        List<User> response = api.groupsGroupIdUsersGet(groupId);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a group
     *
     * Assigns users to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersPutTest() {
        String groupId = null;
        Body3 body = null;
        InlineResponse201 response = api.groupsGroupIdUsersPut(groupId, body);

        // TODO: test validations
    }
    
    /**
     * Removes a user from a group
     *
     * Unassign a user from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersUserIdDeleteTest() {
        String groupId = null;
        String userId = null;
        api.groupsGroupIdUsersUserIdDelete(groupId, userId);

        // TODO: test validations
    }
    
    /**
     * Unassigns a list of users from a product.
     *
     * Unassign a list of users from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersDeleteTest() {
        String productId = null;
        Body20 body = null;
        api.productsProductIdUsersDelete(productId, body);

        // TODO: test validations
    }
    
    /**
     * List all users assigned to a product
     *
     * List all users assigned to a product.     Conditions to be able to perform the action:         - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersGetTest() {
        String productId = null;
        List<String> response = api.productsProductIdUsersGet(productId);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a product.
     *
     * Assigns users to a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersPutTest() {
        String productId = null;
        Body19 body = null;
        ProductShortUsers response = api.productsProductIdUsersPut(productId, body);

        // TODO: test validations
    }
    
    /**
     * Unassigns a user from a product
     *
     * Unassigns a user from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdUsersUserIdDeleteTest() {
        String productId = null;
        String userId = null;
        api.productsProductIdUsersUserIdDelete(productId, userId);

        // TODO: test validations
    }
    
    /**
     * List of all Users.
     *
     * Returns a list of all the users of the system. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() {
        List<User> response = api.usersGet();

        // TODO: test validations
    }
    
    /**
     * Creates a new user
     *
     * Creates a new user. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() {
        Body23 body = null;
        api.usersPost(body);

        // TODO: test validations
    }
    
    /**
     * Deletes a user
     *
     * Deletes a user. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted, or   - To have the permission **MANAGE_USERS_BU** granted. Having this permission you can delete users who belongs to some of your user groups. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdDeleteTest() {
        String userId = null;
        api.usersUserIdDelete(userId);

        // TODO: test validations
    }
    
    /**
     * Get all the information of a user
     *
     * Get all the relevant information of a user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() {
        String userId = null;
        UserDetailed response = api.usersUserIdGet(userId);

        // TODO: test validations
    }
    
    /**
     * Generates a user API token
     *
     * Generates a new user API token. If the user already has a generated API token, generates a new one. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted, or   - To have the permission **MANAGE_USERS_BU** granted. Having this permission you can generate a user API token to users who belongs to some of your user groups. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdTokenPostTest() {
        String userId = null;
        String response = api.usersUserIdTokenPost(userId);

        // TODO: test validations
    }
    
}
