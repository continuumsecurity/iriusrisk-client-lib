/*
 * IriusRisk API
 * Products API
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.client.model.AssociateCountermeasureThreatLibraryRequestBody;
import com.iriusrisk.api.client.model.AssociateCountermeasureWeaknessLibraryRequestBody;
import com.iriusrisk.api.client.model.AssociateWeaknessThreatLibraryRequestBody;
import com.iriusrisk.api.client.model.ControlCommand;
import com.iriusrisk.api.client.model.CreateLibraryRequestBody;
import com.iriusrisk.api.client.model.CreateRiskPatternRequestBody;
import com.iriusrisk.api.client.model.CreateThreatLibraryRequestBody;
import com.iriusrisk.api.client.model.CreateUseCaseLibraryRequestBody;
import com.iriusrisk.api.client.model.CreateWeaknessLibraryRequestBody;
import com.iriusrisk.api.client.model.Error;
import java.io.File;
import com.iriusrisk.api.client.model.Library;
import com.iriusrisk.api.client.model.LibraryControl;
import com.iriusrisk.api.client.model.LibraryThreat;
import com.iriusrisk.api.client.model.LibraryUseCase;
import com.iriusrisk.api.client.model.LibraryWeakness;
import com.iriusrisk.api.client.model.ProductShort;
import com.iriusrisk.api.client.model.RiskPattern;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LibrariesApi
 */
@Ignore
public class LibrariesApiTest {

    private final LibrariesApi api = new LibrariesApi();

    
    /**
     * Deletes a Library
     *
     * Deletes a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefDeleteTest() {
        String apiToken = null;
        String libraryRef = null;
        api.librariesLibraryRefDelete(apiToken, libraryRef);

        // TODO: test validations
    }
    
    /**
     * Gets library details
     *
     * Gets the library details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefGetTest() {
        String apiToken = null;
        String libraryRef = null;
        Library response = api.librariesLibraryRefGet(apiToken, libraryRef);

        // TODO: test validations
    }
    
    /**
     * Creates new Risk Pattern
     *
     * Creates new Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsPostTest() {
        String apiToken = null;
        String libraryRef = null;
        CreateRiskPatternRequestBody createRiskPatternRequestBody = null;
        RiskPattern response = api.librariesLibraryRefRiskpatternsPost(apiToken, libraryRef, createRiskPatternRequestBody);

        // TODO: test validations
    }
    
    /**
     * Creates new countermeasure in a risk pattern
     *
     * Creates new countermeasure in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefCountermeasuresPostTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        ControlCommand createCountermeasureLibraryRequestBody = null;
        LibraryControl response = api.librariesLibraryRefRiskpatternsRiskPatternRefCountermeasuresPost(apiToken, libraryRef, riskPatternRef, createCountermeasureLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Deletes a Risk Pattern
     *
     * Deletes a Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefDeleteTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        api.librariesLibraryRefRiskpatternsRiskPatternRefDelete(apiToken, libraryRef, riskPatternRef);

        // TODO: test validations
    }
    
    /**
     * Gets Risk Pattern details
     *
     * Gets Risk Pattern details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefGetTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        RiskPattern response = api.librariesLibraryRefRiskpatternsRiskPatternRefGet(apiToken, libraryRef, riskPatternRef);

        // TODO: test validations
    }
    
    /**
     * Creates new use case in a library.
     *
     * Creates new use case in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefUsecasesPostTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        CreateUseCaseLibraryRequestBody createUseCaseLibraryRequestBody = null;
        LibraryUseCase response = api.librariesLibraryRefRiskpatternsRiskPatternRefUsecasesPost(apiToken, libraryRef, riskPatternRef, createUseCaseLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Creates a new threat in a library.
     *
     * Creates a new threat in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsPostTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        String useCaseRef = null;
        CreateThreatLibraryRequestBody createThreatLibraryRequestBody = null;
        LibraryThreat response = api.librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsPost(apiToken, libraryRef, riskPatternRef, useCaseRef, createThreatLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Associates a countermeasure to a threat in a risk pattern.
     *
     * Associates a countermeasure to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsThreatRefCountermeasuresPutTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        String useCaseRef = null;
        String threatRef = null;
        AssociateCountermeasureThreatLibraryRequestBody associateCountermeasureThreatLibraryRequestBody = null;
        LibraryControl response = api.librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsThreatRefCountermeasuresPut(apiToken, libraryRef, riskPatternRef, useCaseRef, threatRef, associateCountermeasureThreatLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Associates weakness to a threat in a risk pattern.
     *
     * Associates weakness to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsThreatRefWeaknessesPutTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        String useCaseRef = null;
        String threatRef = null;
        AssociateWeaknessThreatLibraryRequestBody associateWeaknessThreatLibraryRequestBody = null;
        LibraryWeakness response = api.librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsThreatRefWeaknessesPut(apiToken, libraryRef, riskPatternRef, useCaseRef, threatRef, associateWeaknessThreatLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Associates a countermeasure to a weakness in a risk pattern.
     *
     * Associates a countermeasure to a weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsThreatRefWeaknessesWeaknessRefCountermeasuresPutTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        String useCaseRef = null;
        String threatRef = null;
        String weaknessRef = null;
        AssociateCountermeasureWeaknessLibraryRequestBody associateCountermeasureWeaknessLibraryRequestBody = null;
        LibraryControl response = api.librariesLibraryRefRiskpatternsRiskPatternRefUsecasesUseCaseRefThreatsThreatRefWeaknessesWeaknessRefCountermeasuresPut(apiToken, libraryRef, riskPatternRef, useCaseRef, threatRef, weaknessRef, associateCountermeasureWeaknessLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Creates a new weakness in a risk pattern
     *
     * Creates a new Weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryRefRiskpatternsRiskPatternRefWeaknessesPostTest() {
        String apiToken = null;
        String libraryRef = null;
        String riskPatternRef = null;
        CreateWeaknessLibraryRequestBody createWeaknessLibraryRequestBody = null;
        LibraryWeakness response = api.librariesLibraryRefRiskpatternsRiskPatternRefWeaknessesPost(apiToken, libraryRef, riskPatternRef, createWeaknessLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Creates a Library
     *
     * Creates a new empty Library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesPostTest() {
        String apiToken = null;
        CreateLibraryRequestBody createLibraryRequestBody = null;
        Library response = api.librariesPost(apiToken, createLibraryRequestBody);

        // TODO: test validations
    }
    
    /**
     * Creates a new product, library or template from a XML file upload.
     *
     * Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsUploadPostTest() {
        String apiToken = null;
        String ref = null;
        String name = null;
        File fileName = null;
        String type = null;
        ProductShort response = api.productsUploadPost(apiToken, ref, name, fileName, type);

        // TODO: test validations
    }
    
}
