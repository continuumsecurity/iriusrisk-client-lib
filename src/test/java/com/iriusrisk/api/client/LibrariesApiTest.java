/*
 * IriusRisk API
 * IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.client.model.Body10;
import com.iriusrisk.api.client.model.Body11;
import com.iriusrisk.api.client.model.Body12;
import com.iriusrisk.api.client.model.Body13;
import com.iriusrisk.api.client.model.Body14;
import com.iriusrisk.api.client.model.Body15;
import com.iriusrisk.api.client.model.Body16;
import com.iriusrisk.api.client.model.Body9;
import com.iriusrisk.api.client.model.ControlCommand;

import java.io.File;
import com.iriusrisk.api.client.model.Library;
import com.iriusrisk.api.client.model.LibraryControl;
import com.iriusrisk.api.client.model.LibraryThreat;
import com.iriusrisk.api.client.model.LibraryUseCase;
import com.iriusrisk.api.client.model.LibraryWeakness;
import com.iriusrisk.api.client.model.ProductShort;
import com.iriusrisk.api.client.model.RiskPattern;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for LibrariesApi
 */
@Ignore
public class LibrariesApiTest {

    private final LibrariesApi api = new LibrariesApi();

    
    /**
     * Deletes a Library
     *
     * Deletes a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdDeleteTest() {
        String libraryId = null;
        api.librariesLibraryIdDelete(libraryId);

        // TODO: test validations
    }
    
    /**
     * Gets library details
     *
     * Gets the library details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdGetTest() {
        String libraryId = null;
        Library response = api.librariesLibraryIdGet(libraryId);

        // TODO: test validations
    }
    
    /**
     * Creates new Risk Pattern
     *
     * Creates new Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsPostTest() {
        String libraryId = null;
        Body10 body = null;
        RiskPattern response = api.librariesLibraryIdRiskpatternsPost(libraryId, body);

        // TODO: test validations
    }
    
    /**
     * Creates new countermeasure in a risk pattern
     *
     * Creates new countermeasure in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdCountermeasuresPostTest() {
        String libraryId = null;
        String riskPatternId = null;
        ControlCommand body = null;
        LibraryControl response = api.librariesLibraryIdRiskpatternsRiskPatternIdCountermeasuresPost(libraryId, riskPatternId, body);

        // TODO: test validations
    }
    
    /**
     * Deletes a Risk Pattern
     *
     * Deletes a Risk Pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdDeleteTest() {
        String libraryId = null;
        String riskPatternId = null;
        api.librariesLibraryIdRiskpatternsRiskPatternIdDelete(libraryId, riskPatternId);

        // TODO: test validations
    }
    
    /**
     * Gets Risk Pattern details
     *
     * Gets Risk Pattern details. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdGetTest() {
        String libraryId = null;
        String riskPatternId = null;
        RiskPattern response = api.librariesLibraryIdRiskpatternsRiskPatternIdGet(libraryId, riskPatternId);

        // TODO: test validations
    }
    
    /**
     * Creates new use case in a library.
     *
     * Creates new use case in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesPostTest() {
        String libraryId = null;
        String riskPatternId = null;
        Body11 body = null;
        LibraryUseCase response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesPost(libraryId, riskPatternId, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new threat in a library.
     *
     * Creates a new threat in a library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsPostTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        Body12 body = null;
        LibraryThreat response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsPost(libraryId, riskPatternId, useCaseId, body);

        // TODO: test validations
    }
    
    /**
     * Associates a countermeasure to a threat in a risk pattern.
     *
     * Associates a countermeasure to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdCountermeasuresPutTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        String threatId = null;
        Body16 body = null;
        LibraryControl response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdCountermeasuresPut(libraryId, riskPatternId, useCaseId, threatId, body);

        // TODO: test validations
    }
    
    /**
     * Associates weakness to a threat in a risk pattern.
     *
     * Associates weakness to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesPutTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        String threatId = null;
        Body14 body = null;
        LibraryWeakness response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesPut(libraryId, riskPatternId, useCaseId, threatId, body);

        // TODO: test validations
    }
    
    /**
     * Associates a countermeasure to a weakness in a risk pattern.
     *
     * Associates a countermeasure to a weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesWeaknessIdCountermeasuresPutTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        String threatId = null;
        String weaknessId = null;
        Body15 body = null;
        LibraryControl response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesWeaknessIdCountermeasuresPut(libraryId, riskPatternId, useCaseId, threatId, weaknessId, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new weakness in a risk pattern
     *
     * Creates a new Weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdWeaknessesPostTest() {
        String libraryId = null;
        String riskPatternId = null;
        Body13 body = null;
        LibraryWeakness response = api.librariesLibraryIdRiskpatternsRiskPatternIdWeaknessesPost(libraryId, riskPatternId, body);

        // TODO: test validations
    }
    
    /**
     * Creates a Library
     *
     * Creates a new empty Library. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesPostTest() {
        Body9 body = null;
        Library response = api.librariesPost(body);

        // TODO: test validations
    }
    
    /**
     * Creates a new product, library or template from a XML file upload.
     *
     * Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsUploadPostTest() {
        String ref = null;
        String name = null;
        File fileName = null;
        String type = null;
        ProductShort response = api.productsUploadPost(ref, name, fileName, type);

        // TODO: test validations
    }
    
}
