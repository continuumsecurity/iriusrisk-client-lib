/*
 * IriusRisk API
 * IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.client.model.Body21;
import com.iriusrisk.api.client.model.ComponentControl;
import com.iriusrisk.api.client.model.ControlsId;

import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for ControlsApi
 */
@Ignore
public class ControlsApiTest {

    private final ControlsApi api = new ControlsApi();

    
    /**
     * Sets the desired status to a countermeasure
     *
     * Sets the desired status to a countermeasure. Possible values are:             - implemented             - recommended             - rejected             - required Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.   - To have the permission **COUNTERMEASURE_SELECT_IMPLEMENTED** granted to set implemented state.   - To have the permission **COUNTERMEASURE_SELECT_RECOMMENDED** granted to set recommended state.   - To have the permission **COUNTERMEASURE_SELECT_REJECTED** granted to set reject state.   - To have the permission **COUNTERMEASURE_SELECT_REQUIRED** granted to set required state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdComponentsComponentIdControlsCountermeasureIdStatusPutTest() {
        String productId = null;
        String componentId = null;
        String countermeasureId = null;
        Body21 body = null;
        api.productsProductIdComponentsComponentIdControlsCountermeasureIdStatusPut(productId, componentId, countermeasureId, body);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all required countermeasures of a component
     *
     * Returns a list of all the required countermeasures of a component. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdComponentsComponentIdControlsRequiredGetTest() {
        String productId = null;
        String componentId = null;
        List<ComponentControl> response = api.productsProductIdComponentsComponentIdControlsRequiredGet(productId, componentId);

        // TODO: test validations
    }
    
    /**
     * Deletes the given list of product countermeasures
     *
     * Deletes the given list of the countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsDeleteTest() {
        String productId = null;
        ControlsId controlsId = null;
        api.productsProductIdControlsDelete(productId, controlsId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all product countermeasures
     *
     * Returns a list of all the countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsGetTest() {
        String productId = null;
        List<ComponentControl> response = api.productsProductIdControlsGet(productId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all implemented countermeasures of a product.
     *
     * Returns a list of all the implemented countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsImplementedGetTest() {
        String productId = null;
        List<ComponentControl> response = api.productsProductIdControlsImplementedGet(productId);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all required countermeasures of a product
     *
     * Returns a list of all the required countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdControlsRequiredGetTest() {
        String productId = null;
        List<ComponentControl> response = api.productsProductIdControlsRequiredGet(productId);

        // TODO: test validations
    }
    
}
