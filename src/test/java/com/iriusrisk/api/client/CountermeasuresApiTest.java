/*
 * IriusRisk API
 * IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.client.model.Body15;
import com.iriusrisk.api.client.model.Body16;
import com.iriusrisk.api.client.model.Body21;
import com.iriusrisk.api.client.model.ControlCommand;
import com.iriusrisk.api.client.model.LibraryControl;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for CountermeasuresApi
 */
@Ignore
public class CountermeasuresApiTest {

    private final CountermeasuresApi api = new CountermeasuresApi();

    
    /**
     * Creates new countermeasure in a risk pattern
     *
     * Creates new countermeasure in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdCountermeasuresPostTest() {
        String libraryId = null;
        String riskPatternId = null;
        ControlCommand body = null;
        LibraryControl response = api.librariesLibraryIdRiskpatternsRiskPatternIdCountermeasuresPost(libraryId, riskPatternId, body);

        // TODO: test validations
    }
    
    /**
     * Associates a countermeasure to a threat in a risk pattern.
     *
     * Associates a countermeasure to a threat in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdCountermeasuresPutTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        String threatId = null;
        Body16 body = null;
        LibraryControl response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdCountermeasuresPut(libraryId, riskPatternId, useCaseId, threatId, body);

        // TODO: test validations
    }
    
    /**
     * Associates a countermeasure to a weakness in a risk pattern.
     *
     * Associates a countermeasure to a weakness in a risk pattern. Conditions to be able to perform the action:   - To have the permission **LIBRARY_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesWeaknessIdCountermeasuresPutTest() {
        String libraryId = null;
        String riskPatternId = null;
        String useCaseId = null;
        String threatId = null;
        String weaknessId = null;
        Body15 body = null;
        LibraryControl response = api.librariesLibraryIdRiskpatternsRiskPatternIdUsecasesUseCaseIdThreatsThreatIdWeaknessesWeaknessIdCountermeasuresPut(libraryId, riskPatternId, useCaseId, threatId, weaknessId, body);

        // TODO: test validations
    }
    
    /**
     * Sets the desired status to a countermeasure
     *
     * Sets the desired status to a countermeasure. Possible values are:             - implemented             - recommended             - rejected             - required Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.   - To have the permission **COUNTERMEASURE_SELECT_IMPLEMENTED** granted to set implemented state.   - To have the permission **COUNTERMEASURE_SELECT_RECOMMENDED** granted to set recommended state.   - To have the permission **COUNTERMEASURE_SELECT_REJECTED** granted to set reject state.   - To have the permission **COUNTERMEASURE_SELECT_REQUIRED** granted to set required state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdComponentsComponentIdControlsCountermeasureIdStatusPutTest() {
        String productId = null;
        String componentId = null;
        String countermeasureId = null;
        Body21 body = null;
        api.productsProductIdComponentsComponentIdControlsCountermeasureIdStatusPut(productId, componentId, countermeasureId, body);

        // TODO: test validations
    }
    
}
