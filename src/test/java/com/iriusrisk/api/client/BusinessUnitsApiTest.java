/*
 * IriusRisk API
 * IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.api.client;

import com.iriusrisk.api.ApiTestBase;
import com.iriusrisk.api.client.model.Body1;
import com.iriusrisk.api.client.model.Body2;
import com.iriusrisk.api.client.model.Body3;
import com.iriusrisk.api.client.model.Body4;
import com.iriusrisk.api.client.model.Body5;
import com.iriusrisk.api.client.model.Body6;
import com.iriusrisk.api.client.model.Body7;
import com.iriusrisk.api.client.model.Body8;
import com.iriusrisk.api.client.model.Group;
import com.iriusrisk.api.client.model.InlineResponse201;
import com.iriusrisk.api.client.model.User;

import org.junit.Assert;
import org.junit.Test;

import java.util.List;
import java.util.UUID;

/**
 * API tests for BusinessUnitsApi
 */
public class BusinessUnitsApiTest extends ApiTestBase {

    private final BusinessUnitsApi api = new BusinessUnitsApi(API_CLIENT);

    
    /**
     * Deletes a users business unit
     *
     * Deletes a users business unit. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdDeleteTest() {
        // First, we create a new business unit which will later be removed
        Body5 newBusinessUnit = new Body5();
        newBusinessUnit.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newBusinessUnit.name(newBusinessUnit.getRef()+" name");

        Group response = api.businessunitsPost(newBusinessUnit);
        Assert.assertNotNull(response);

        // Now, our call to remove and related verifications
        api.businessunitsBusinessunitIdDelete(response.getName());
    }
    
    /**
     * Gets the business unit details.
     *
     * Returns the business unit details for the requested business unit. Conditions to be able to perform the action:    - If the caller has the PRODUCTS_LIST_ALL permission then all business units can be queried without restriction.    - Without the PRODUCTS_LIST_ALL permission, the call will only return the business unit if the caller belongs to that business unit. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdGetTest() {
        String businessunitId = "Company B";
        List<Group> response = api.businessunitsBusinessunitIdGet(businessunitId);
    }
    
    /**
     * Update a users business unit
     *
     * Updates a users business unit. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdPutTest() {
        // First, we create a new business unit which will later be removed
        Body5 newBusinessUnit = new Body5();
        newBusinessUnit.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newBusinessUnit.name(newBusinessUnit.getRef()+" name");

        Group createResponse = api.businessunitsPost(newBusinessUnit);
        Assert.assertNotNull(createResponse);

        // Now, our call to remove and related verifications
        Body6 editBusinessUnit = new Body6();
        editBusinessUnit.setName(newBusinessUnit.getName() + "-- edited");
        editBusinessUnit.setDesc(newBusinessUnit.getDesc() + "-- edited");
        Group editResponse = api.businessunitsBusinessunitIdPut(createResponse.getRef(), editBusinessUnit);

        Assert.assertEquals(editBusinessUnit.getName(), editResponse.getName());
        Assert.assertEquals(editBusinessUnit.getDesc(), editResponse.getDesc());
        Assert.assertEquals(createResponse.getRef(), editResponse.getRef());
    }
    
    /**
     * Unassign a list of users from a business unit
     *
     * Unassign a list of users from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdUsersDeleteTest() {
        String businessunitId = "Company B";
        Body8 body = new Body8();
        body.addUsernamesItem("admin");
        api.businessunitsBusinessunitIdUsersDelete(businessunitId, body);
    }
    
    /**
     * List users from a business unit
     *
     * List users who belongs to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdUsersGetTest() {
        String businessunitId = "Company A";
        List<User> response = api.businessunitsBusinessunitIdUsersGet(businessunitId);
        Assert.assertFalse(response.isEmpty());
    }
    
    /**
     * Assigns users to a business unit
     *
     * Assigns users to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitIdUsersPutTest() {
        String businessunitId = "Company B";
        Body7 usersToAdd = new Body7();
        usersToAdd.addUsernamesItem("admin");
        InlineResponse201 response = api.businessunitsBusinessunitIdUsersPut(businessunitId, usersToAdd);

        Assert.assertEquals(businessunitId, response.getGroup());
        Assert.assertEquals(usersToAdd.getUsernames(), response.getUsernames());
    }
    
    /**
     * Removes a user from a business unit
     *
     * Unassign a user from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessunitsIdUsersUserIdDeleteTest() {
        String businessunitsId = "Company B";
        String userId = "admin";
        api.businessunitsBusinessunitsIdUsersUserIdDelete(businessunitsId, userId);
    }
    
    /**
     * Gets a list of all business units
     *
     * Gets a list of all user&#39;s business units. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsGetTest() {
        List<Group> response = api.businessunitsGet();
        Assert.assertFalse(response.isEmpty());
    }
    
    /**
     * Creates a new user business unit
     *
     * Creates a new user business unit. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsPostTest() {
        Body5 newBusinessUnit = new Body5();
        newBusinessUnit.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newBusinessUnit.name(newBusinessUnit.getRef()+" name");

        Group response = api.businessunitsPost(newBusinessUnit);

        Assert.assertEquals(newBusinessUnit.getRef(), response.getRef());
        Assert.assertEquals(newBusinessUnit.getName(), response.getName());
        Assert.assertEquals(newBusinessUnit.getDesc(), response.getDesc());
    }
    
    /**
     * Gets a list of all groups
     *
     * Gets a list of all user&#39;s groups. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGetTest() {
        List<Group> response = api.groupsGet();
        Assert.assertFalse(response.isEmpty());
    }
    
    /**
     * Deletes a users group
     *
     * Deletes a users group. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdDeleteTest() {
        // We create the group which will later be deleted
        // First, we create a new business unit which will later be removed
        Body5 newBusinessUnit = new Body5();
        newBusinessUnit.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newBusinessUnit.name(newBusinessUnit.getRef()+" name");

        Group response = api.businessunitsPost(newBusinessUnit);
        Assert.assertNotNull(response);

        // Now, our call to remove and related verifications
        api.groupsGroupIdDelete(response.getName());
    }
    
    /**
     * Gets the group details.
     *
     * Returns the group details for the requested group. Conditions to be able to perform the action:    - If the caller has the PRODUCTS_LIST_ALL permission then all groups can be queried without restriction.    - Without the PRODUCTS_LIST_ALL permission, the call will only return the group if the caller belongs to that group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdGetTest() {
        String groupId = "Company A";
        List<Group> response = api.groupsGroupIdGet(groupId);
    }
    
    /**
     * Update a users group
     *
     * Updates a users group. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdPutTest() {
        // First we create an entity
        Body1 newGroup = new Body1();
        newGroup.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newGroup.name(newGroup.getRef()+" name");

        Group creationResponse = api.groupsPost(newGroup);
        Assert.assertNotNull(creationResponse);
        Assert.assertEquals(newGroup.getRef(), creationResponse.getRef());

        Body2 updateBody = new Body2();
        updateBody.setName(newGroup.getName() + " - name");
        updateBody.setName(newGroup.getName() + " - desc");
        Group updateResponse = api.groupsGroupIdPut(newGroup.getRef(), updateBody);
        Assert.assertEquals(updateBody.getName(), updateResponse.getName());
        Assert.assertEquals(updateBody.getDesc(), updateResponse.getDesc());
    }
    
    /**
     * Unassign a list of users from a group
     *
     * Unassign a list of users from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersDeleteTest() {

        // First we create an entity to later edit
        Body1 newGroup = new Body1();
        newGroup.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newGroup.name(newGroup.getRef()+" name");

        Group responseCreation = api.groupsPost(newGroup);
        Assert.assertNotNull(responseCreation);
        Assert.assertNotNull(responseCreation.getRef());

        // Now we add an user
        Body3 bodyUsersToAdd = new Body3();
        bodyUsersToAdd.addUsernamesItem("admin");

        InlineResponse201 responseEdit = api.groupsGroupIdUsersPut(responseCreation.getName(), bodyUsersToAdd);
        Assert.assertEquals(newGroup.getName(), responseEdit.getGroup());
        Assert.assertEquals(responseEdit.getUsernames(), bodyUsersToAdd.getUsernames());

        // And now we perform the actual test we want removing the user
        Body4 bodyUsersToDelete = new Body4();
        bodyUsersToDelete.addUsernamesItem("admin");
        api.groupsGroupIdUsersDelete(responseCreation.getName(), bodyUsersToDelete);
    }
    
    /**
     * List users from a group
     *
     * List users who belongs to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersGetTest() {
        String groupId = "Company A";
        List<User> response = api.groupsGroupIdUsersGet(groupId);
        Assert.assertFalse(response.isEmpty());
    }
    
    /**
     * Assigns users to a group
     *
     * Assigns users to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersPutTest() {
        // First we create an entity to later edit
        Body1 newGroup = new Body1();
        newGroup.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newGroup.name(newGroup.getRef()+" name");

        Group responseCreation = api.groupsPost(newGroup);
        Assert.assertNotNull(responseCreation);
        Assert.assertNotNull(responseCreation.getRef());

        // Now we add an user
        Body3 body = new Body3();
        body.addUsernamesItem("admin");

        InlineResponse201 responseEdit = api.groupsGroupIdUsersPut(responseCreation.getName(), body);
        Assert.assertEquals(newGroup.getName(), responseEdit.getGroup());
        Assert.assertEquals(responseEdit.getUsernames(), body.getUsernames());
    }
    
    /**
     * Removes a user from a group
     *
     * Unassign a user from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdUsersUserIdDeleteTest() {
        String groupId = "Company B";
        String userId = "admin";
        api.groupsGroupIdUsersUserIdDelete(groupId, userId);
    }
    
    /**
     * Creates a new user group
     *
     * Creates a new user group. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsPostTest() {
        Body1 newGroup = new Body1();
        newGroup.ref("new-bu-ref-"+ UUID.randomUUID().toString());
        newGroup.name(newGroup.getRef()+" name");

        Group response = api.groupsPost(newGroup);

        Assert.assertEquals(newGroup.getRef(), response.getRef());
        Assert.assertEquals(newGroup.getName(), response.getName());
        Assert.assertEquals(newGroup.getDesc(), response.getDesc());
    }
    
}
