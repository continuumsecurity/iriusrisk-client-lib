/*
 * IriusRisk API
 * Products API
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.restapi.client.api;

import com.iriusrisk.restapi.client.ApiException;
import com.iriusrisk.restapi.client.model.AssignUserGroupRequestBody;
import com.iriusrisk.restapi.client.model.AssignUserGroupRequestBody1;
import com.iriusrisk.restapi.client.model.AssignUsersProductRequestBody;
import com.iriusrisk.restapi.client.model.CreateUserRequestBody;
import com.iriusrisk.restapi.client.model.Error;
import com.iriusrisk.restapi.client.model.InlineResponse201;
import com.iriusrisk.restapi.client.model.ProductShortUsers;
import com.iriusrisk.restapi.client.model.UnassignUsersProductRequestBody;
import com.iriusrisk.restapi.client.model.UnassingUsersGroupRequestBody;
import com.iriusrisk.restapi.client.model.UnassingUsersGroupRequestBody1;
import com.iriusrisk.restapi.client.model.User;
import com.iriusrisk.restapi.client.model.UserDetailed;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Unassign a list of users from a business unit
     *
     * Unassign a list of users from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersDeleteTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        UnassingUsersGroupRequestBody1 unassingUsersGroupRequestBody = null;
        api.businessunitsBusinessUnitNameUsersDelete(apiToken, businessUnitName, unassingUsersGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * List users from a business unit
     *
     * List users who belongs to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersGetTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        List<User> response = api.businessunitsBusinessUnitNameUsersGet(apiToken, businessUnitName);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a business unit
     *
     * Assigns users to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersPutTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        AssignUserGroupRequestBody1 assignUserGroupRequestBody = null;
        InlineResponse201 response = api.businessunitsBusinessUnitNameUsersPut(apiToken, businessUnitName, assignUserGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Removes a user from a business unit
     *
     * Unassign a user from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersUserDeleteTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        String user = null;
        api.businessunitsBusinessUnitNameUsersUserDelete(apiToken, businessUnitName, user);

        // TODO: test validations
    }
    
    /**
     * Unassign a list of users from a group
     *
     * Unassign a list of users from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersDeleteTest() throws ApiException {
        String apiToken = null;
        String group = null;
        UnassingUsersGroupRequestBody unassingUsersGroupRequestBody = null;
        api.groupsGroupUsersDelete(apiToken, group, unassingUsersGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * List users from a group
     *
     * List users who belongs to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersGetTest() throws ApiException {
        String apiToken = null;
        String group = null;
        List<User> response = api.groupsGroupUsersGet(apiToken, group);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a group
     *
     * Assigns users to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersPutTest() throws ApiException {
        String apiToken = null;
        String group = null;
        AssignUserGroupRequestBody assignUserGroupRequestBody = null;
        InlineResponse201 response = api.groupsGroupUsersPut(apiToken, group, assignUserGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Removes a user from a group
     *
     * Unassign a user from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersUserDeleteTest() throws ApiException {
        String apiToken = null;
        String group = null;
        String user = null;
        api.groupsGroupUsersUserDelete(apiToken, group, user);

        // TODO: test validations
    }
    
    /**
     * Unassigns a list of users from a product.
     *
     * Unassign a list of users from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersDeleteTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        UnassignUsersProductRequestBody unassignUsersProductRequestBody = null;
        api.productsRefUsersDelete(apiToken, ref, unassignUsersProductRequestBody);

        // TODO: test validations
    }
    
    /**
     * List all users assigned to a product
     *
     * List all users assigned to a product.     Conditions to be able to perform the action:         - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<String> response = api.productsRefUsersGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a product.
     *
     * Assigns users to a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersPutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        AssignUsersProductRequestBody assignUsersProductRequestBody = null;
        ProductShortUsers response = api.productsRefUsersPut(apiToken, ref, assignUsersProductRequestBody);

        // TODO: test validations
    }
    
    /**
     * Unassigns a user from a product
     *
     * Unassigns a user from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersUserDeleteTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String user = null;
        api.productsRefUsersUserDelete(apiToken, ref, user);

        // TODO: test validations
    }
    
    /**
     * List of all Users.
     *
     * Returns a list of all the users of the system. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String apiToken = null;
        List<User> response = api.usersGet(apiToken);

        // TODO: test validations
    }
    
    /**
     * Creates a new user
     *
     * Creates a new user. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        String apiToken = null;
        CreateUserRequestBody createUserRequestBody = null;
        api.usersPost(apiToken, createUserRequestBody);

        // TODO: test validations
    }
    
    /**
     * Deletes a user
     *
     * Deletes a user. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted, or   - To have the permission **MANAGE_USERS_BU** granted. Having this permission you can delete users who belongs to some of your user groups. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsernameDeleteTest() throws ApiException {
        String apiToken = null;
        String username = null;
        api.usersUsernameDelete(apiToken, username);

        // TODO: test validations
    }
    
    /**
     * Get all the information of a user
     *
     * Get all the relevant information of a user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsernameGetTest() throws ApiException {
        String apiToken = null;
        String username = null;
        UserDetailed response = api.usersUsernameGet(apiToken, username);

        // TODO: test validations
    }
    
    /**
     * Generates a user API token
     *
     * Generates a new user API token. If the user already has a generated API token, generates a new one. Conditions to be able to perform the action:   - To have the permission **ALL_USERS_UPDATE** granted, or   - To have the permission **MANAGE_USERS_BU** granted. Having this permission you can generate a user API token to users who belongs to some of your user groups. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsernameTokenPostTest() throws ApiException {
        String apiToken = null;
        String username = null;
        String response = api.usersUsernameTokenPost(apiToken, username);

        // TODO: test validations
    }
    
}
