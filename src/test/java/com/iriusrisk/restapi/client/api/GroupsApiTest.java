/*
 * IriusRisk API
 * Products API
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iriusrisk.restapi.client.api;

import com.iriusrisk.restapi.client.ApiException;
import com.iriusrisk.restapi.client.model.AssignGroupsProductRequestBody;
import com.iriusrisk.restapi.client.model.AssignUserGroupRequestBody;
import com.iriusrisk.restapi.client.model.AssignUserGroupRequestBody1;
import com.iriusrisk.restapi.client.model.CreateGroupRequestBody;
import com.iriusrisk.restapi.client.model.CreateGroupRequestBody1;
import com.iriusrisk.restapi.client.model.Error;
import com.iriusrisk.restapi.client.model.Group;
import com.iriusrisk.restapi.client.model.InlineResponse200;
import com.iriusrisk.restapi.client.model.InlineResponse201;
import com.iriusrisk.restapi.client.model.ProductShortGroups;
import com.iriusrisk.restapi.client.model.UnassignGroupsProductRequestBody;
import com.iriusrisk.restapi.client.model.UnassingUsersGroupRequestBody;
import com.iriusrisk.restapi.client.model.UnassingUsersGroupRequestBody1;
import com.iriusrisk.restapi.client.model.UpdateGroupRequestBody;
import com.iriusrisk.restapi.client.model.UpdateGroupRequestBody1;
import com.iriusrisk.restapi.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Ignore
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    
    /**
     * Deletes a users business unit
     *
     * Deletes a users business unit. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitIdentifierDeleteTest() throws ApiException {
        String apiToken = null;
        String businessUnitIdentifier = null;
        api.businessunitsBusinessUnitIdentifierDelete(apiToken, businessUnitIdentifier);

        // TODO: test validations
    }
    
    /**
     * Gets the business unit details.
     *
     * Returns the business unit details for the requested business unit. Conditions to be able to perform the action:    - If the caller has the PRODUCTS_LIST_ALL permission then all business units can be queried without restriction.    - Without the PRODUCTS_LIST_ALL permission, the call will only return the business unit if the caller belongs to that business unit. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitIdentifierGetTest() throws ApiException {
        String apiToken = null;
        String businessUnitIdentifier = null;
        List<Group> response = api.businessunitsBusinessUnitIdentifierGet(apiToken, businessUnitIdentifier);

        // TODO: test validations
    }
    
    /**
     * Update a users business unit
     *
     * Updates a users business unit. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitIdentifierPutTest() throws ApiException {
        String apiToken = null;
        String businessUnitIdentifier = null;
        UpdateGroupRequestBody1 updateGroupRequestBody = null;
        Group response = api.businessunitsBusinessUnitIdentifierPut(apiToken, businessUnitIdentifier, updateGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Unassign a list of users from a business unit
     *
     * Unassign a list of users from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersDeleteTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        UnassingUsersGroupRequestBody1 unassingUsersGroupRequestBody = null;
        api.businessunitsBusinessUnitNameUsersDelete(apiToken, businessUnitName, unassingUsersGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * List users from a business unit
     *
     * List users who belongs to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersGetTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        List<User> response = api.businessunitsBusinessUnitNameUsersGet(apiToken, businessUnitName);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a business unit
     *
     * Assigns users to a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersPutTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        AssignUserGroupRequestBody1 assignUserGroupRequestBody = null;
        InlineResponse201 response = api.businessunitsBusinessUnitNameUsersPut(apiToken, businessUnitName, assignUserGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Removes a user from a business unit
     *
     * Unassign a user from a business unit. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a business unit, **if you belong to this business unit**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsBusinessUnitNameUsersUserDeleteTest() throws ApiException {
        String apiToken = null;
        String businessUnitName = null;
        String user = null;
        api.businessunitsBusinessUnitNameUsersUserDelete(apiToken, businessUnitName, user);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all business units
     *
     * Gets a list of all user&#39;s business units. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsGetTest() throws ApiException {
        String apiToken = null;
        List<Group> response = api.businessunitsGet(apiToken);

        // TODO: test validations
    }
    
    /**
     * Creates a new user business unit
     *
     * Creates a new user business unit. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void businessunitsPostTest() throws ApiException {
        String apiToken = null;
        CreateGroupRequestBody1 createGroupRequestBody = null;
        Group response = api.businessunitsPost(apiToken, createGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all Groups
     *
     * Gets a list of all user&#39;s groups. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGetTest() throws ApiException {
        String apiToken = null;
        List<Group> response = api.groupsGet(apiToken);

        // TODO: test validations
    }
    
    /**
     * Deletes a users group
     *
     * Deletes a users group. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdentifierDeleteTest() throws ApiException {
        String apiToken = null;
        String groupIdentifier = null;
        api.groupsGroupIdentifierDelete(apiToken, groupIdentifier);

        // TODO: test validations
    }
    
    /**
     * Gets the group details.
     *
     * Returns the group details for the requested group. Conditions to be able to perform the action:    - If the caller has the PRODUCTS_LIST_ALL permission then all groups can be queried without restriction.    - Without the PRODUCTS_LIST_ALL permission, the call will only return the group if the caller belongs to that group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdentifierGetTest() throws ApiException {
        String apiToken = null;
        String groupIdentifier = null;
        List<Group> response = api.groupsGroupIdentifierGet(apiToken, groupIdentifier);

        // TODO: test validations
    }
    
    /**
     * Update a users group
     *
     * Updates a users group. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupIdentifierPutTest() throws ApiException {
        String apiToken = null;
        String groupIdentifier = null;
        UpdateGroupRequestBody updateGroupRequestBody = null;
        Group response = api.groupsGroupIdentifierPut(apiToken, groupIdentifier, updateGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Unassign a list of users from a group
     *
     * Unassign a list of users from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersDeleteTest() throws ApiException {
        String apiToken = null;
        String group = null;
        UnassingUsersGroupRequestBody unassingUsersGroupRequestBody = null;
        api.groupsGroupUsersDelete(apiToken, group, unassingUsersGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * List users from a group
     *
     * List users who belongs to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersGetTest() throws ApiException {
        String apiToken = null;
        String group = null;
        List<User> response = api.groupsGroupUsersGet(apiToken, group);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a group
     *
     * Assigns users to a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersPutTest() throws ApiException {
        String apiToken = null;
        String group = null;
        AssignUserGroupRequestBody assignUserGroupRequestBody = null;
        InlineResponse201 response = api.groupsGroupUsersPut(apiToken, group, assignUserGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Removes a user from a group
     *
     * Unassign a user from a group. Conditions to be able to perform the action:  - To have the permission **ALL_USERS_UPDATE** granted, or  - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a group, **if you belong to this group**. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupUsersUserDeleteTest() throws ApiException {
        String apiToken = null;
        String group = null;
        String user = null;
        api.groupsGroupUsersUserDelete(apiToken, group, user);

        // TODO: test validations
    }
    
    /**
     * Creates a new user group
     *
     * Creates a new user group. Conditions to be able to perform the action:    - To have the permission **ALL_USERS_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsPostTest() throws ApiException {
        String apiToken = null;
        CreateGroupRequestBody createGroupRequestBody = null;
        Group response = api.groupsPost(apiToken, createGroupRequestBody);

        // TODO: test validations
    }
    
    /**
     * Unassigns a list of user groups from a product.
     *
     * Unassigns a list of user groups from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefGroupsDeleteTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        UnassignGroupsProductRequestBody unassignGroupsProductRequestBody = null;
        InlineResponse200 response = api.productsRefGroupsDelete(apiToken, ref, unassignGroupsProductRequestBody);

        // TODO: test validations
    }
    
    /**
     * List all groups assigned to a product
     *
     * List all groups assigned to a product.     Conditions to be able to perform the action:         - If the caller has the PRODUCTS_LIST_ALL permission then all products can be queried without restriction.         - Without the PRODUCTS_LIST_ALL permission, the call will only return the groups if the caller belongs to that product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefGroupsGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<String> response = api.productsRefGroupsGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Assigns groups of users to a product.
     *
     * Assigns groups of users to a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefGroupsPutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        AssignGroupsProductRequestBody assignGroupsProductRequestBody = null;
        ProductShortGroups response = api.productsRefGroupsPut(apiToken, ref, assignGroupsProductRequestBody);

        // TODO: test validations
    }
    
}
